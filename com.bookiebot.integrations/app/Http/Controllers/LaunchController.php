<?php

namespace App\Http\Controllers;

use App\Exceptions\WrongRequestException;
use App\Integrations\Constants\GISErrorCodes;
use App\Integrations\ResponderTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Symfony\Component\HttpKernel\Exception\HttpException;


class LaunchController extends Controller
{

    use ResponderTrait;

    /**
     * @SWG\Get(
     *     path="/launch",
     *     summary="Integrated Point to generate Game Launch URLs",
     *     tags={"LaunchGames"},
     *     description="This Endpoint will be used to open any kind of games",
     *     produces={"application/xml", "application/json"},
     *
     *     @SWG\Parameter(
     *         name="provider",
     *         in="query",
     *         default="Betsoft",
     *         description="Provider name e.g Betsoft,Netent,Ezugi and etc...",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="launchURL",
     *         in="query",
     *         default="http://google.com?token={token}&gameId={gameId}&lang={lang}",
     *         description="This is Provider Specific Game Launch URL",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="lang",
     *         in="query",
     *         default="en",
     *         description="Game language",
     *         required=true,
     *         type="string"
     *     ),
     *
     *     @SWG\Parameter(
     *         name="token",
     *         in="query",
     *         default="XXX-YYY-XXX",
     *         description="Token Generated By Casino Core, this is mandatory when mode parameter is not fun",
     *         required=false,
     *         type="string"
     *     ),
     *

     *
     *     @SWG\Parameter(
     *         name="gameId",
     *         in="query",
     *         description="Game Identifier",
     *         required=false,
     *         type="string"
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="tableId",
     *         in="query",
     *         description="Table Identifier",
     *         required=false,
     *         type="string"
     *     ),
     *
     *     @SWG\Parameter(
     *         name="mode",
     *         in="query",
     *         description="This can be fun or real, default is real",
     *         required=false,
     *         type="string"
     *     ),
     *
     *     @SWG\Parameter(
     *         name="exitURL",
     *         in="query",
     *         description="This feature is mainly for Mobile Implementations",
     *         required=false,
     *         type="string"
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="cashierURL",
     *         in="query",
     *         description="Set URL on cashier button inside opened game",
     *         required=false,
     *         type="string"
     *     ),
     *
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/successModel")
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid request parameters",
     *         @SWG\Schema(ref="#/definitions/errorModel")
     *     ),
     * )
     */
    public function handle(Request $request)
    {


        //Game Provider Identifier
        $provider = $request->input("provider");

        if (!$provider) {
            //Todo Throw Wrong Request Exception
            return $this->respondError(
                GISErrorCodes::WRONG_REQUEST, "Missing provider parameter"
            );
        }

        //Game Launch URL
        $launchUrl = $request->input('launchURL');


        //Parameters Which should be swaped in URL
        $parameters = $request->all();

        //Remove Those Parameters Which are not in URL Swap Method
        unset($parameters['provider']);
        unset($parameters['launchURL']);


        if (!is_array($parameters)) {
            //TODO throw Wrong Request Exception
            return abort(GISErrorCodes::WRONG_REQUEST,$this->respondError(
                GISErrorCodes::WRONG_REQUEST, "Parameters variable should be array"
            ));


//            return $this->respondError(
//                ErrorCodes::WRONG_PARAMETERS, "Parameters variable should be array"
//            );
        }


        //If we don't have Launch Url try to get from database
        $providerNameSpace = "App\\Integrations\\$provider\\$provider";


        //If Provider Class Doesn't exist throw Exception
        if (!class_exists($providerNameSpace)) {
            //TODO wRITE cuSTOM eXCEPTION

//            return $this->respondError(
//                ErrorCodes::WRONG_PARAMETERS, "Wrong Provider Parameter"
//            );


            return $this->respondError(
                GISErrorCodes::WRONG_REQUEST,
                "Wrong Provider Was Passed in request",
                GISErrorCodes::WRONG_REQUEST
            );
        }


        //Instantiate Provider Class Of Game
        //This Can me /Vendors/Betsoft or /Vendors/Ezugi or any other
        $providerInstance = App::make($providerNameSpace);

        //Check Mode Of Opening Game and
        //If Mode in Fun we should call fun launch specific method on  Provider Integration Class
        $launchMethod = 'launch';
        if (isset($parameters['mode']) && $parameters['mode'] == 'fun') {
            $launchMethod = 'launchFun';
        }


        if(isset($parameters['mode']) && $parameters['mode'] != 'fun' && !isset($parameters['token'])) {
            return $this->respondError(
                GISErrorCodes::WRONG_REQUEST, "If requested mode is not fun token should be in request"
            );
        }


        //If Specific Launch Method Exists
        if (method_exists($providerInstance, $launchMethod)) {
            //Call Launch Implementation on Provider Instance And Return Results
            return App::call($providerNameSpace . '@' . $launchMethod);
        }


        //If Provider Didn't have Specific Launch Strategy
        return $this->respondSuccess(
            array(
                'url'=>self::populateURLWithParameters($launchUrl,$parameters)
            ),
            'Launch url was generated successfully'
        );

    }


    /**
     * @param $launchUrl
     * @param $parameters
     * @return mixed
     */
    public static function populateURLWithParameters($launchUrl, $parameters)
    {

        //If No Parameters At all to swap in url
        //return URL itself
        if (!count($parameters)) {
            return $launchUrl;
        }

        //Iterate Over Parameters and modify corresponding values inside URL
        foreach ($parameters as $paramName => $paramValue) {
            if(gettype($paramValue) != 'array') {
                $launchUrl = str_replace('{' . $paramName . '}', $paramValue, $launchUrl);
            }
        }


        return $launchUrl;
    }


}
