<?php

namespace App\Integrations\Betsoft;


use App\Integrations\Betsoft\Constants\ErrorCodes;//BetSoft Specific Error Code Which are sent back to them
use App\Integrations\Betsoft\Constants\Config;//BetSoft Specivic Errors
use App\Integrations\Constants\GISErrorCodes;
use App\Integrations\Vendors\GameVendorBase;

use Illuminate\Http\Request;


class Betsoft extends GameVendorBase
{



    private $CasinoCore;


    /**
     * Ezugi constructor. - Inject Configuration Details
     */
    public function __construct()
    {
        //Inject Casino Core Instance
        $this->CasinoCore = $this->getCasinoIntegrationInstance(
            Config::PROVIDER(),
            Config::SECRET()
        );
    }


    /**
     * This method will aply launch logic and will return game launch URL
     * @param Request $request
     * @return array
     */
    public function launch(Request $request)
    {

        //Get Token Value And Authenticate With Core

        //Redirect User To Game Launch URL
        return [
            'message' => 'I launch Real Game Mode Betsoft Implementation',
            'params' => $request->all(),
            'populatedURL' => $this->populateURLWithParameters($request->input('launchURL'), $request->input('parameters'))
        ];


    }


    /**
     * This method will apply logic for launching game in funny mode, without real money
     * @param Request $request
     * @return array
     */
    public function launchFun(Request $request)
    {
        return [
            'message' => 'I launch Funny Game Mode Betsoft Implementation'
        ];
    }



    /**
     * @SWG\Get(
     *     path="/betsoft/auth",
     *     summary="Betsoft calls this URL to get user detail or permission of TOKEN",
     *     tags={"Betsoft"},
     *     description="",
     *     produces={"application/xml", "application/json"},
     *
     *     @SWG\Parameter(
     *         name="token",
     *         in="query",
     *         default="508108a7c38935d8de2324f3d6544b19",
     *         description="Token Generated By Casino Core, then passed to betsoft and returned to validate.",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="hash",
     *         in="query",
     *         default="508108a7c38935d8de2324f3d6544b19",
     *         description="Hash to validate internal request initiated from BetSoft. md5(token+SECRET)",
     *         required=true,
     *         type="string",
     *     ),
     *
     *
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/successModel")
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid request parameters",
     *         @SWG\Schema(ref="#/definitions/errorModel")
     *     ),
     * )
     */
    public function auth(Request $request)
    {


        //Check If Request Hash Was Valid
        if(!$this->isHashValid( $request, 'token')) {
            //Should Return Hash Error XML Response
            return $this->generateResponseXML($request,[
                'result'=>'ERROR',
                'code'=>ErrorCodes::INVALID_HASH
            ]);
        }


        //Grab Token Value From Request
        $token = $request->input("token");


        //Call Core Service To Authenticate User
        $authResponse = $this->CasinoCore->auth($token);


        //Authentication Was Successful
        if ($authResponse['code'] == GISErrorCodes::SUCCESS) {

            //Authenticated User Details
            $userAuthDetails = $authResponse['data'];


            //Get User Balance
            $responseDataForBetSoft = [
                "userId"=>$userAuthDetails['userId'],
                "username"=>$userAuthDetails['userName'],
                "currency"=>$userAuthDetails['currency']//ISO3 Code
            ];


            //If Auth Response Didn't Include Balance value we should get value with separate call
            //Some Casinos can return balance with AUTH call some don't
            if(!isset($userAuthDetails['balance']) || $userAuthDetails['balance'] == null) {
                    $responseDataForBetSoft['balance'] = $balance = $this->getBalance($userAuthDetails['userId'],$userAuthDetails['currency']);
            }


            //Response With XML Data
            return $this->generateResponseXML($request,$responseDataForBetSoft);
        }


        //Authentication Failed
        else {
            return $this->generateResponseXML($request,[
                'result'=>'ERROR',
                'code'=>ErrorCodes::INVALID_TOKEN
            ]);
        }

    }



    /**
     * @SWG\Get(
     *     path="/betsoft/getUserInfo",
     *     summary="Betsoft calls this URL to get user detail or permission of TOKEN",
     *     tags={"Betsoft"},
     *     description="",
     *     produces={"application/xml", "application/json"},
     *
     *     @SWG\Parameter(
     *         name="userId",
     *         in="query",
     *         default="1556234",
     *         description="Unique ID of the user within Casino",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="hash",
     *         in="query",
     *         default="508108a7c38935d8de2324f3d6544b19",
     *         description="Hash to validate internal request initiated from BetSoft. md5(userId+SECRET)",
     *         required=true,
     *         type="string",
     *     ),
     *
     *
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/successModel")
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid request parameters",
     *         @SWG\Schema(ref="#/definitions/errorModel")
     *     ),
     * )
     */
    public function getUserInfo(Request $request) {


        //Check If Request Hash Was Valid
        if(!$this->isHashValid( $request, 'userId')) {
            //Should Return Hash Error XML Response
            return $this->generateResponseXML($request,[
                'result'=>'ERROR',
                'code'=>ErrorCodes::INVALID_HASH
            ]);
        }


        $userId = $request->input('userId');


        $userDetails = $this->CasinoCore->getUserInfo($userId);

        if($userDetails['code'] == GISErrorCodes::SUCCESS)
        {
            $data = $userDetails['data'];

            //TODO add result
            $responseDataForBetSoft = [
                'Username'=>$data['userName'],
                'FirstName'=>$data['firstName'],
                'Lastname'=>$data['lastName'],
                'Email'=>$data['email'],
                'Currency'=>$data['currency']
            ];

            return $this->generateResponseXML($request,$responseDataForBetSoft);
        }
        else
        {
            return $this->generateResponseXML($request,[
                'result'=>'ERROR',
                'code'=>ErrorCodes::UNKNOWN_USER_ID
            ]);
        }


    }




    /**
     * @SWG\Get(
     *     path="/betsoft/depositOrWithdraw",
     *     summary="Betsoft calls this URL to increase user balance and return user winning",
     *     tags={"Betsoft"},
     *     description="",
     *     produces={"application/xml", "application/json"},
     *
     *     @SWG\Parameter(
     *         name="userId",
     *         in="query",
     *         default="1556234",
     *         description="Unique ID of the player within Casino Core",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="bet",
     *         in="query",
     *         default="123|456",
     *         description="Amount of the bet (in cents) and the unique ID of the transaction on the BSG side in the format: bet_amount|transactionId",
     *         required=false,
     *         type="string",
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="win",
     *         in="query",
     *         default="789|101112",
     *         description="Amount of the win (in cents) and the unique ID of the transaction on the BSG side in the format: win_amount|transactionId",
     *         required=false,
     *         type="string",
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="roundId",
     *         in="query",
     *         default="654",
     *         description="Unique ID of the game round onthe BSG side. The game round can have several Bet/Result requests.",
     *         required=true,
     *         type="integer",
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="gameId",
     *         in="query",
     *         default="5566",
     *         description="Unique ID of the game.",
     *         required=true,
     *         type="integer",
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="isRoundFinished",
     *         in="query",
     *         default="false",
     *         description="Optional. Informs the EC system if the current round is finished.",
     *         required=false,
     *         type="boolean",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="hash",
     *         in="query",
     *         default="XXXX-YYYY-ZZZZ",
     *         description="Order: userId, bet, win, isRoundFinished, roundId, gameId",
     *         required=false,
     *         type="string",
     *     ),
     *
     *
     *     @SWG\Parameter(
     *         name="gameSessionId",
     *         in="query",
     *         default="KKKK-JJJJ-LLLL",
     *         description="Unique ID of the game session on BSG side.",
     *         required=true,
     *         type="string",
     *     ),
     *
     *     @SWG\Parameter(
     *         name="negativeBet",
     *         in="query",
     *         default="-199",
     *         description="Optional. Can be sent only with a win operation. Specifies the amount in cents to return to the player's balance as result of a partially canceled bet (can occur in Craps and Ride’m Poker games). Note: negativeBet is not part of the win amount and must be processed separately.",
     *         required=false,
     *         type="integer",
     *     ),
     *
     *
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/successModel")
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid request parameters",
     *         @SWG\Schema(ref="#/definitions/errorModel")
     *     ),
     * )
     */
    public function depositOrWithdraw(Request $request)
    {


        //If Present Withdraw From Core
        $bet = $request->input('bet');//Format:bet_amount|transactionId
        
        //If Present Deposit In Core
        $win = $request->input('win');//Format:win_amount|transactionId


        //Only Bet or Only win can be in request at the same time
        if($bet && $win) {
            //TODO Log Properly Wrong Request Came
            return $this->generateResponseXML($request,[
                'result'=>"FAILED",
                'code'=>ErrorCodes::OPERATION_FAILED
            ]);
        }


        //If User Made Bet We Call Withdraw Method
        if ($bet) {
            return $this->withdraw($request);
        }


        //If BetSoft Is Sending Win Then We Call Deposit Method
        else if ($win) {
            return $this->deposit($request);
        }


        //If Reuqest didn;t inclued Bet or Win mandatory params return error
        return $this->generateResponseXML($request,[
            'result'=>"FAILED",
            'code'=>ErrorCodes::OPERATION_FAILED
        ]);

    }



    /**
     * Called From DepositOrWithdraw
     *  Available Response Codes For BetSoft
     *      300 - Insufficient funds
     *      310 - Unknown User Id
     *      399 - Internal Error
     *      500 - Invalid Hash
     *
    **/
    public function deposit(Request $request)
    {


        //Check If Request Hash Was Valid
        if(!$this->isHashValid($request,'userId,win,isRoundFinished,roundId,gameId')) {
            //Should Return Hash Error XML Response
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::INVALID_HASH
            ]);
        }


        //Get userId From request and check existence in CasinoCore
        $userId = $request->input('userId');


        //Check If User Exists And Grab Details
        $userInfoResponse = $this->CasinoCore->getUserInfo($userId);
        if($userInfoResponse['code'] != GISErrorCodes::SUCCESS) {
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::UNKNOWN_USER_ID
            ]);
        }

        //User Details In Local Variable This for for getting user currency value
        $userInfo = $userInfoResponse['data'];
        $currency = $userInfo['currency'];


        $win = $request->input('win');

        //If Win Parameter was wrong and didn't include delimiter "|"
        if(!strpos($win,"|")) {
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::OPERATION_FAILED
            ]);
        }

        //Save Sending Parameters in local variables
        $exploded = explode("|",$win);
        //Save Values of Win Amount and TransactionsId in local variable
        $depositAmount = $exploded[0];
        $gameTransactionRef = $exploded[1];


        $gameTransactionUniqueRef = Config::PROVIDER().$gameTransactionRef;

        $roundId = $request->input('roundId');
        $gameId = $request->input('gameId');
        $isRoundFinished = $request->input('isRoundFinished');
        $gameSessionId = $request->input('gameSessionId');
        $negativeBet = $request->input('negativeBet');//TODO This Parameter has to be checked
        $additional_data = "gameSessionId=$gameSessionId|isRoundFinished=$isRoundFinished|roundId=$roundId|gameId=$gameId";



        //Send Request To Casino Core for depositing on user balance
        $depositResponse = $this->CasinoCore->deposit($userId,$depositAmount,$currency,$gameTransactionRef,$gameTransactionUniqueRef,null,$gameId,$additional_data);


        //Response Data Schema Fro Betsoft
        $responseDataForBetSoft = ['result'=>'ERROR','extSystemTransactionId'=>null,'balance'=>0];


        //If Transaction Was Successful
        if($depositResponse['code'] == GISErrorCodes::SUCCESS) {

            //Grab User Balance For Proper Response
            $balance = $this->getBalance($userId,$currency);

            //Send XML Response To Bet Soft
            return $this->generateResponseXML($request,[
                'result'=>'OK',
                'extSystemTransactionId'=>$depositResponse['data']['casinoTransactionId'],
                'balance'=>$balance
            ]);
        }

        //If Something Failed To Process Transaction
        else {

            //If Transaction Was Already Processed Send Success Depending On Status
            if($depositResponse['error_code'] == GISErrorCodes::TRANSACTION_ALREADY_EXISTS) {

                //Call Casino To check transaction status
                $transactionStatusResponse = $this->CasinoCore->checkTransactionStatus($gameTransactionRef,$gameTransactionUniqueRef);

                //Transaction Was Processed Successfully in Past
                if($transactionStatusResponse['code'] == GISErrorCodes::SUCCESS) {

                    $balance = $this->getBalance($userId,$currency);

                    //Respond With OK XML
                    return $this->generateResponseXML($request,[
                        'result'=>'OK',
                        'extSystemTransactionId'=>$transactionStatusResponse['data']['casinoTransactionId'],
                        'balance'=>$balance
                    ]);


                }
                //Send Response That Transaction Was not successful
                else {

                    //TODO LOG PROPERLY

                    //Respond With FAILED XML
                    return $this->generateResponseXML($request,[
                        'result'=>'FAILED',
                        'code'=>301
                    ]);

                }
            }

            //If Transaction was not alrady processed send Error and log error
            //Respond With OK XML
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>301
            ]);

        }

    }



    /**
     * Called From DepositOrWithdraw When "bet parameter" is pressent
     *  Available Response Codes For BetSoft
     *      300 - Insufficient funds
     *      310 - Unknown User Id
     *      399 - Internal Error
     *      500 - Invalid Hash
     *
     **/
    public function withdraw(Request $request)
    {

        //Check If Request Hash Was Valid
        if(!$this->isHashValid($request,'userId,bet,isRoundFinished,roundId,gameId')) {
            //Should Return Hash Error XML Response
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::INVALID_HASH
            ]);
        }


        //Get userId From request and check existence in CasinoCore
        $userId = $request->input('userId');


        //Check If User Exists And Grab Details
        $userInfoResponse = $this->CasinoCore->getUserInfo($userId);
//        print_r($userInfoResponse);

        if($userInfoResponse['code'] != GISErrorCodes::SUCCESS) {
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::UNKNOWN_USER_ID
            ]);
        }

        //User Details In Local Variable This for for getting user currency value
        $userInfo = $userInfoResponse['data'];
        $currency = $userInfo['currency'];

        $bet = $request->input('bet');

        //If Win Parameter was wrong and didn't include delimiter "|"
        if(!strpos($bet,"|")) {
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::OPERATION_FAILED
            ]);
        }

        //Save Sending Parameters in local variables
        $exploded = explode("|",$bet);

        //Save Values of Bet Amount and TransactionsId in local variable
        $withdrawAmount = $exploded[0];
        $gameTransactionRef = $exploded[1];


        $gameTransactionUniqueRef = Config::PROVIDER().$gameTransactionRef;

        $roundId = $request->input('roundId');
        $gameId = $request->input('gameId');
        $isRoundFinished = $request->input('isRoundFinished');
        $gameSessionId = $request->input('gameSessionId');
        $negativeBet = $request->input('negativeBet');//TODO This Parameter has to be checked
        $additional_data = "gameSessionId=$gameSessionId|isRoundFinished=$isRoundFinished|roundId=$roundId|gameId=$gameId";



        //Send Request To Casino Core for depositing on user balance
        $withdrawResponse = $this->CasinoCore->withdraw($userId,$withdrawAmount,$currency,$gameTransactionRef,$gameTransactionUniqueRef,null,$gameId,$additional_data);

        print_r($withdrawResponse);

        //If Transaction Was Successful
        if($withdrawResponse['code'] == GISErrorCodes::SUCCESS) {

            //Grab User Balance For Proper Response
            $balance = $this->getBalance($userId,$currency);

            //Send XML Response To Bet Soft
            return $this->generateResponseXML($request,[
                'result'=>'OK',
                'extSystemTransactionId'=>$withdrawResponse['data']['casinoTransactionId'],
                'balance'=>$balance
            ]);
        }

        //If Something Failed To Process Transaction
        else {

            //If Transaction Was Already Processed Send Success Depending On Status
            if($withdrawResponse['error_code'] == GISErrorCodes::TRANSACTION_ALREADY_EXISTS) {

                //Call Casino To check transaction status
                $transactionStatusResponse = $this->CasinoCore->checkTransactionStatus($gameTransactionRef,$gameTransactionUniqueRef);

                //Transaction Was Processed Successfully in Past
                if($transactionStatusResponse['code'] == GISErrorCodes::SUCCESS) {

                    $balance = $this->getBalance($userId,$currency);

                    //Respond With OK XML
                    return $this->generateResponseXML($request,[
                        'result'=>'OK',
                        'extSystemTransactionId'=>$transactionStatusResponse['data']['casinoTransactionId'],
                        'balance'=>$balance
                    ]);


                }
                //Send Response That Transaction Was not successful
                else {

                    //TODO LOG PROPERLY

                    //Respond With FAILED XML
                    return $this->generateResponseXML($request,[
                        'result'=>'FAILED',
                        'code'=>301
                    ]);

                }
            }

            //If Transaction was not alrady processed send Error and log error
            //Respond With OK XML
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>301
            ]);

        }


    }



    /**
     * @param Request $request
     * @return array
     */
    public function rollback(Request $request)
    {
        //Check If Request Hash Was Valid
        if(!$this->isHashValid($request,'userId,casinoTransactionId')) {
            //Should Return Hash Error XML Response
            return $this->generateResponseXML($request,[
                'result'=>'FAILED',
                'code'=>ErrorCodes::INVALID_HASH
            ]);
        }

        $userId = $request->input('userId');
        $casinoTransactionId = $request->input('casinoTransactionId');


        //Call Rollback On Casino Core instance
        $rollbackResponse = $this->CasinoCore->rollback($casinoTransactionId);


        //Transaction Rollback Was Successful
        if($rollbackResponse['code'] == GISErrorCodes::SUCCESS) {

        }
        else {

        }



        return [];
    }


    /**
     * This methods gets Request Object as parameter and checks if hash is correct and request is valid to process
     * @param Request $request
     * @param $involvedParametersToCalculateHash - This are parameter Names(comma separated strings) which should be present in hash calculation process
     * @return bool
     */
    private function isHashValid(Request $request, $involvedParametersToCalculateHash)
    {
        //TODO ENABLE HASH CHECKING
        return true;

        //Explode Comma Separated String As Array
        $involvedParameters = explode(',',$involvedParametersToCalculateHash);



        //Create String For Hash Calculation
        $hashString = "";

        foreach($involvedParameters as $eachParam) {
            if($request->has($eachParam)) {
                $hashString .= $request->input($eachParam);
            } else {
                return false;
            }
        }


        //Compare Hash and Calculated Hash
        if($request->input('hash') == md5($hashString.Config::BSG_SECRET())) {
            return true;
        }

        //If Hash Was Not Correct
        return false;
    }


    /**
     * If Casino Returned balance return it otherwise return 0
     * @param $userId
     * @param $currency
     * @return int
     */
    private function getBalance($userId,$currency) {
        $balanceResponse = $this->CasinoCore->getBalance($userId,$currency);
        if($balanceResponse['code'] == GISErrorCodes::SUCCESS) {
            return $balanceResponse['data']['balance'];
        } else {
            //Log That we could not get balance
            return 0;
        }
    }



    /**
     * When Returning Responses To Betsoft, XML Structure should like this:
     *
     *  <EXTSYSTEM>
     *
     *      <REQUEST>
     *           <TOKEN>123123-12312312-12342342</TOKEN>
     *           <HASH>1e3b0ae551b1dfdc48137bc50ad26d1c</HASH>
     *      </REQUEST>
     *
     *      <TIME>18 Mar 2011 12:13:44</TIME>
     *
     *      <RESPONSE>
     *          <RESULT>OK</RESULT>
     *          <USERID>123123</USERID>
     *          <USERNAME>testplayer</USERNAME>
     *          <FIRSTNAME>Richard</FIRSTNAME>
     *          <LASTNAME>Smith</LSTNAME>
     *          <EMAIL>rs@somemail.com</EMAIL>
     *          <CURRENCY>EUR</CURRENCY>
     *          <BALANCE>23200</BALANCE>
     *      </RESPONSE>
     *
     * <EXTSYSTEM>
     *
     *
     * This Method Get two parameters
     * @param request
     * @param $responseData
     * And generates Structured XML for Betsoft
     * @return string
     */
    private function generateResponseXML($request, $responseData)
    {

        //Unset Parameters Which should not be included in Response XML Fro Request Object
        unset($request['path']);
        unset($request['namespace']);
        unset($request['handlerClass']);
        unset($request['handlerMethod']);

        //Create ROOT xml node
        $returnXML = "<EXTSYSTEM>";

            //Create Request NODE
            $returnXML .= "<REQUEST>";
                foreach($request->all() as $key=>$value) {
                    $key = strtoupper($key);
                    $returnXML .= "<$key>$value</$key>";
                }
            $returnXML .= "<REQUEST>";

            //Create Response TIME xml node
            $returnXML .= "<TIME>".date('d M Y H:i:s')."</TIME>";

            //Generate XML NODES for response DATA
            $returnXML .= "<RESPONSE>";
                foreach($responseData as $paramKey=> $paramValue) {
                    $paramKey = strtoupper($paramKey);
                    $returnXML .= "<$paramKey>$paramValue</$paramKey>";
                }
            $returnXML .= "</RESPONSE>";



        $returnXML .= "<EXTSYSTEM>";

        return $returnXML;
    }


}

