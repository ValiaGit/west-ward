<?php


namespace App\Integrations\Playson;


use App\Integrations\Constants\GISErrorCodes;
use App\Integrations\Plasydon\Constants\Config;

use App\Integrations\ResponderTrait;
use App\Integrations\Vendors\GameVendorBase;

use Carbon\Carbon;
use Illuminate\Http\Request;


/**
 * Class Playson
 * @package App\Integrations\Playson
 */
class Playson extends GameVendorBase
{

    use ResponderTrait;


    /**
     * Instance For Communicating Casino Core
     * @var mixed
     */
    protected $CasinoCore;


    /**
     * Playson constructor. - Inject CasinoCore Implementation Details
     */
    public function __construct()
    {
        //Inject Casino Core Instance
        $this->CasinoCore = $this->getCasinoIntegrationInstance(
            Config::PROVIDER(),
            Config::SECRET()
        );
    }


    public function launch(Request $request) {

        return ['I launch game'];
    }

    /**
     * All Playson requests will pass through this method
     * This method Will Determine what is request type and will
     * Route requests to appropriate internal methods
     * @SWG\POST(
     *     path="/playson/handle",
     *     summary="This is entry point for all Playson Requests",
     *     tags={"Playson"},
     *     description="",
     *
     *   @SWG\Parameter(
     *     in="body",
     *     name="body",
     *     description="Created user object",
     *     required=false,
     *     default="
    <server session='09f5906793dd959571c0285ff63af2df' time='2014-01-01T00:00:00Z'>
    <enter id='101' guid='R0TCR6LSHCMJDMJQ' key='testkey123'>
    <game name='alice_c' />
    </enter>
    </server>",
     *     @SWG\Schema(
     *       type="xml",
     *       @SWG\Items()
     *     )
     *   ),
     *
     *
     *
     *     @SWG\Response(
     *         response=200,
     *         description="successful operation",
     *         @SWG\Schema(ref="#/definitions/successModel")
     *     ),
     *     @SWG\Response(
     *         response="400",
     *         description="Invalid request parameters",
     *         @SWG\Schema(ref="#/definitions/errorModel")
     *     ),
     * )
     * @param Request $request
     * @return mixed|string
     */
    public function handle(Request $request)
    {

        try {
            //Get Requqest Body And Parse as PHP Array
            $requestBody = $request->getContent();
            $requestArray = $this->parseRequestXML($requestBody);

            if (!isset($requestArray['command'])) {
                //TODO Return ERROR&Log
                return 'No Command';
            }

            //Determine What command was executed by Playson
            $commandName = $requestArray['command']['name'];

            //Launch Game Confirmation
            if ($commandName == 'enter') {
                return $this->auth($requestArray);
            }

            //Getting User Balance
            if ($commandName == 'getbalance') {
                return $this->getBalance($requestArray);
            }



            //User Made Bet Call Withdraw action
            if ($commandName == 'roundbet') {
                return $this->roundBetOrWin($requestArray,'bet');
            }

            //User won money send winning amount
            if ($commandName == 'roundwin') {
                return $this->roundBetOrWin($requestArray,'win');
            }

            //Refunding User
            if ($commandName == 'refund') {
                return $this->refund($requestArray);
            }


            //The <logout> command finishes the game (a player leaves a game page). WL cannot reject game end.
            if ($commandName == 'logout') {
                return $this->logout($requestArray);
            }



        }catch(\Exception $e) {
            //TODO Wrong Requst Response
            return 'Exception Fired ';
        }

        //TODO Wrong Requst Response
        return 'Wrong Request';
    }


    /**
     * Called from handle() method;
     *
     * The <enter> command confirms a game launch.
     *
     *  XML Sample
     * <server session='09f5906793dd959571c0285ff63af2df' time='2014-01-01T00:00:00Z'>
     * <enter id='101' guid='R0TCR6LSHCMJDMJQ' key='testkey123'>
     * <game name='alice_c' />
     * </enter>
     * </server>
     *
     *
     * @param array $parameters
     * @return mixed
     */
    private function auth($parameters)
    {
        // TODO: Implement auth() method.
        try {


            $data = $parameters['command']['data'];
            $attributes = $data['@attributes'];
            $id = $attributes['id'];
            $guid = $attributes['guid'];//Generated By Playson
            $key = $attributes['key'];



            //TODO Here We Also Can Check some Game Specific Parameters in gatabase on this prvovider
            if(isset($data['game'])) {
                $game_data = $data['game']['@attributes'];
            }


            //Send Authentication Request to Casino Core
            $authResponse = $this->CasinoCore->auth($key);

            //Auth was successful
            if($authResponse['code'] == GISErrorCodes::SUCCESS) {

                $AuthResponseData = $authResponse['data'];

                if(!isset($AuthResponseData['balance']) || $AuthResponseData['balance'] == null) {
                    $balance = $this->grabBalance($AuthResponseData['userId'],$AuthResponseData['currency']);
                } else {
                    $balance = $AuthResponseData['balance'];
                }


                //Can Be Saved in Database
                //Save GUID and UserDetails In session for subsequent queries
                session([
                    'guid'=>$guid,
                    'balanceVersion'=>1,
                    'userDetails'=>[
                        'userId'=>$AuthResponseData['userId'],
                        'userName'=>$AuthResponseData['userName'],
                        'currency'=>$AuthResponseData['currency'],
                        'currencyId'=>$AuthResponseData['currencyId'],
                    ]
                ]);


                /**
                 * Response Structure should be like this:
                 * version=1 is incremented on every baance change under this session
                 *
                    <service session="1234" time="2014-01-01T00:00:00">
                       <enter id="101" result="ok">
                            <user wlid="10" type="real" mode="normal" />
                            <balance value="300" version="1" type="real" currency="EUR" />
                       </enter>
                    </service>
                 */
                return $this->generateResponseXML(
                    $parameters['session'],
                    '<enter id="'.$id.'" result="ok">
                        <user wlid="'.$AuthResponseData['userId'].'" type="real" mode="normal" />
                        <balance value="'.$balance.'" version="1" type="real" currency="'.$AuthResponseData['currency'].'" />
                    </enter>'
                );

            }

            //Authentication failed
            else {

                //TODO Log Auth Failed Warning

                //On Failure Flush Session Data


                //Send Error XML to PLayson
                return $this->generateResponseXML(
                    $parameters['session'],
                    '<enter id="'.$id.'" result="fail"></enter>'
                );
            }


        }catch(\Exception $e) {

            //TODO Log Error Properly
            $e->getMessage();


            //On Failure Flush Session Data
//            $request->session()->flush();

            //Send Error XML to PLayson
            return $this->generateResponseXML(
                $parameters['session'],
                '<enter id="" result="error"></enter>'
            );
        }


    }


    /**
     * Called from handle() method;
     *
     * The <getbalance> command is periodically generated to track changes of balance value.
     * If player's balance has changed, a new value will be displayed in a game.
     *
     *  XML Sample
      <server session='09f5906793dd959571c0285ff63af2df' time='2014-01-01T00:00:00Z'>
        <getbalance id="101" guid="R0TCR6LSHCMJDMJQ" />
      </server>
     *
     * @param array $parameters
     * @return bool|mixed
     */
    private function getBalance($parameters)
    {



        $data = $parameters['command']['data'];
        $attributes = $data['@attributes'];
        $id = $attributes['id'];
        $guid = $attributes['guid'];//Generated By Playson



        //Check We have Session Opened For Getting Balance
        if(session('guid')) {

            //Grab Request Parameters



            $session_guid = session('guid');


            //Check Validity Of Request With Session
            if($session_guid !== $guid) {
                //TODO Send Wrong Session Id Response and log request

                return $this->generateResponseXML(
                    $parameters['session'],
                    '<getbalance id="'.$id.'" result="error"></getbalance>'
                );
            }


            //Get User Details From Session
            $userDetails = session('userDetails');
            //If No User Data in session respond With Error
            if(!$userDetails) {
                return $this->generateResponseXML(
                    $parameters['session'],
                    '<getbalance id="'.$id.'" result="error"></getbalance>'
                );
            }

            //Get userId and currency
            $userId = $userDetails['userId'];
            $currency = $userDetails['currency'];

            //Request Casino Core For Balance
            $balanceValue = $this->grabBalance($userId,$currency);

            /**
             *  Resonse JSON Schema
                <service session="1234" time="2014-01-01T00:00:00">
                    <getbalance id="101" result="ok">
                        <balance value="400" version="2" type="real" currency="EUR" />
                    </getbalance>
                </service>
             */

            //Send Response XML
            return $this->generateResponseXML(
                $parameters['session'],
                '
                    <getbalance id="'.$id.'" result="ok">
                        <balance value="'.$balanceValue.'" version="'.$this->increaseBalanceVersion().'" type="real" currency="'.$currency.'" />
                    </getbalance>
                '
            );



        }

        //Not Valid Request
        else {
            //TODO Send Not Valid Request, Response

            return $this->generateResponseXML(
                $parameters['session'],
                '<getbalance id="'.$id.'" result="error"></getbalance>'
            );
        }
    }




    /**
     * Called from handle() method;
     *
     * Below is structure of XML which is sent by Playson to deposit or deduct money from user balance
     *
        <server session="09f5906793dd959571c0285ff63af2df" time="2015-09- 29T11:44:44" >
                <roundbetwin id="25094347" guid="R0TCR6LSHCMJDMJQ" bet="20" win="425" type="spin" commandtype="complete" >
                    <roundnum id="150929128000006369"/>
                    <event type="spin">
                        <info type="reelset" num="1" />
                        <data type="reel" code="4,t_scat,9,5" num="1" />
                        <data type="reel" code="4,t_scat,5,9" num="2" />
                        <data type="reel" code="7,t_scat,wild,5" num="3" />
                        <data type="reel" code="7,t_scat,8,2" num="4" />
                        <data type="reel" code="7,3,9,5" num="5" />
                        <combo type="line" code="9,9,1" num="14" cash="5"/>
                        <combo type="line" code="5,5,5" num="16" cash="10"/>
                        <combo type="line" code="5,5,1" num="20" cash="10"/>
                        <combo code="scat" />
                    </event>
                </roundbetwin>
         </server>
     *
     */
    private function roundBetOrWin($parameters,$roundType) {


        //Grab Request Parameters
        $data = $parameters['command']['data'];
        $attributes = $data['@attributes'];


        $id = $attributes['id']; //Financial Transaction Reference



        if(session('guid')) {


            $guid = $attributes['guid'];//Generated By Playson



            /**
             * type - Possible Values
             *  spin - main slot game;
             *  freespin -  free spins mode;
             *  bonus - bonus game;
             */
            $type = $attributes['type'];



            //Save RoundNumber in local variable
            $roundNum = "";
            if(isset($data['roundnum'])) {
                if(isset($data['roundnum']['@attributes'])) {
                    $roundNum = $data['roundnum']['@attributes']['id'];
                }
            }

            $session_guid = session('guid');

            //Check Validity Of Request With Session
            if($session_guid !== $guid) {
                //TODO Send Wrong Session Id Response

                return $this->generateResponseXML(
                    $parameters['session'],
                    '<roundbetwin id="'.$id.'" result="error"></roundbetwin>'
                );
            }



            $userDetails = session('userDetails');


            //TODO Implement Appropriate Withdraw or Deposit

            //Deduct Money From Casino Core
            if($roundType == 'bet') {

                $bet = (int) $attributes['bet'];

                //Withdraw Money From User Account Balance


            }

            //Deposit Money in Casino Core
            else if($roundType == 'win') {
                $win = (int) $attributes['win'];

            }





            //Successful Response
            $userDetails = session('userDetails');
            $balance = $this->grabBalance($userDetails['userId'],$userDetails['currency']);
            return $this->generateResponseXML(
                $parameters['session'],
                '
                    <roundbetwin id="'.$id.'" result="ok">
                        <balance value="'.$balance.'" version="43077" type="real" currency="'.$userDetails['currency'].'" />
                    </roundbetwin>
                '
            );

        }


        //If Session ws not valid
        else {
            //TODO Send Not Valid Request, Response
            return $this->generateResponseXML(
                $parameters['session'],
                '<roundbetwin id="'.$id.'" result="error"></roundbetwin>'
            );
        }
    }



    /**
     *
     *  Below Is Request Sample from Playson on refudn request
        <server session="09f5906793dd959571c0285ff63af2df" time="2015- 11- 05T11:47:42" >
            <refund id="32788339" guid="R0TCR6LSHCMJDMJQ" cash="20">
                <storno cmd="roundbetwin" id="32788337" wlid="69022370" gameid="alice_c" guid="000000000062000D" cash="20">
                    <roundnum id="151105800000011915" />
                </storno>
            </refund>
        </server>
     *
     * @param $parameters
     * @return mixed
     */
    private function refund($parameters)
    {

        $data = $parameters['command']['data'];
        $attributes = $data['@attributes'];


        //If Session was found
        if(session('guid')) {

            $id = $attributes['id']; //refund id
            $guid = $attributes['guid'];
            $cash = $attributes['cash'];

            if(isset($data['storno'])) {

                $strNoData = $data['storno']['@attributes'];

                //Details for currently authenticated user
                $userDetails = session('userDetails');


                $cmd = $strNoData['cmd'];
                $gameTransactionRef = $strNoData['id'];
                $userId = $strNoData['wlid'];//User Identifier In Casino System
                $gameid = $strNoData['gameid'];
                $guid = $strNoData['guid'];
                $cash = $strNoData['cash'];//Cents amount to deposit back on user account





                return $strNoData;




            }

            //Request Was Wrong During Refund
            else {
                //TODO Log wrong request and respond with error message
            }




            return $data;



        }
        else {

            //TODO Log Error That Refund Was NOt Successful

        }



    }



    /**
     * Called from handle() method;
     *
     * The <logout> command finishes the game (a player leaves a game page). WL cannot reject game end.
     *
     *  Request XML sample coming from playson
        <service session="1234" time="2014-01-01T00:00:00">
             <logout id="100" result="ok">
                <balance value="300" version="1" type="real" currency="EUR"/>
             </logout>
        </service>
     *
     * @param bool $parameters
     * @return mixed
     */
    public function logout($parameters)
    {
        //clear all session

        try {

            $data = $parameters['command']['data'];
            $attributes = $data['@attributes'];
            $id = $attributes['id'];


            $userDetails = session('userDetails');

            //Flush Session
            //$request->session()->flush();




            //Generates Playson Related XML Response
            return $this->generateResponseXML(
                    $parameters['session'],
                    '
                        <logout id="'.$id.'" result="ok">
                            <balance value="300" version="1" type="real" currency="EUR"/> 
                        </logout>
                    '
            );


        }catch(\Exception $e) {
            //TODO Log Error Logout was not successful

        }





    }



    /**
     * On Every balance return we increase balance version to send to playson
     * This was required by them. Nothng related to GIS
     *
     * (Desc by Playson - Mandatory. Balance version. Enlarges every time a balance amount changes.)
     *
     * @return Session|int
     */
    private function increaseBalanceVersion() {

        //If we have balanceVersion in current session
        if(session('balanceVersion')) {
            //Increase Baance Session Save And Resond with new value;
            $balanceVersion = session('balanceVersion')+1;
            session(['balanceVersion'=>$balanceVersion]);
            return $balanceVersion;
        }
        else {
            return 1;
        }
    }



    /**
     * PlaySon Is Sending XML Payloads To our services, This method
     * Gets XMLString as parameter and returns as PHP Array For Handling
     * @param $xmlString
     * @return mixed
     */
    private function parseRequestXML($xmlString)
    {
        $xml = simplexml_load_string($xmlString);

        if (strpos($xmlString, '<server') === false) return false;
        if (!$xml) return false;
        $array = json_decode(json_encode($xml), TRUE);


        $responseData = [];

        try {
            $iterator = 0;
            foreach ($array as $nodeName => $NodeValue) {
                if ($iterator == 2) {
                    continue;
                }
                if ($nodeName == '@attributes') {
                    $responseData['session'] = isset($NodeValue['session']) ? $NodeValue['session'] : false;
                    $responseData['time'] = isset($NodeValue['time']) ? $NodeValue['time'] : false;
                } else {
                    $responseData['command'] = [
                        'name' => $nodeName,
                        'data' => $NodeValue
                    ];
                }

                $iterator++;
            }

        } catch (\Exception $e) {
            //TODO Log Properly Error Happened
            $responseData = false;
        }


        return $responseData;
    }



    /**
     * This method Send Data back to Playon in their desired XML format
     * @param $request - Request which initiated this response
     * @param $dataXml - Data That should be sent to Playson
     * @return string
     */
    private function generateResponseXML($session, $dataXml) {

        $returnXMLString = '<service session="'.$session.'" time="'.Carbon::now()->toIso8601String().'">';
            $returnXMLString.=$dataXml;
        $returnXMLString.='</service>';
        return $returnXMLString;
    }



}


